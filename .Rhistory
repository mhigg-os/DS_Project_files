knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(tidyverse)
library(tidymodels)
library(schrute)
library(lubridate)
library(dplyr)
library(caret)
library(caTools)
library(ROCR)
library(reshape2)
library(corrplot)
library(broom)
# tedsa_puf_2020_r, for the 2020
load("~/שנה ב/סמסטר ד/מבוא לניתוח נתונים(ננ)/project(ננ)/tedsa_puf_2020_r.rdata")
# df for the 2015-2019
load("~/שנה ב/סמסטר ד/מבוא לניתוח נתונים(ננ)/project(ננ)/tedsa_puf_2015_2019.RData")
# Glimpse the datasets:
glimpse(tedsa_puf_2020_r)
glimpse(df)
tedsa_puf_2020_r <- tedsa_puf_2020_r %>%
janitor::clean_names()
df <- df %>%
janitor::clean_names()
library(dplyr)
library(haven)
# Assuming tedsa_puf_2021_r is your dataset
# Convert labelled columns to regular numeric before replacing -9 with NA
tedsa_puf_2020_r <- tedsa_puf_2020_r %>%
mutate_if(is.labelled, as.numeric) %>%
mutate_all(~ ifelse(. == -9, NA, .))
df <- df %>% mutate_all(~replace(., . == -9, NA))
# here we replace the -9 value with a null value, and that's because the -9 represent a null value based on the documentation of the dataset. so we replace now to ease on our self to handle the null's during the project.
tedsa_puf_2020_r <- tedsa_puf_2020_r %>%
mutate(
gender  = ifelse(is.na(gender) , as.factor('Unknown'), gender) ,
race    = ifelse(is.na(race)   , as.factor('Unknown'), race)   ,
ethnic  = ifelse(is.na(ethnic) , as.factor('Unknown'), ethnic) ,
employ  = ifelse(is.na(employ) , as.factor('Unknown'), employ) ,
hlthins = ifelse(is.na(hlthins), as.factor('Unknown'), hlthins),
psyprob = ifelse(is.na(psyprob), as.factor('Unknown'), psyprob),
freq1   = ifelse(is.na(freq1)  , 0, freq1)                     ,
freq2   = ifelse(is.na(freq2)  , 0, freq2)                     ,
freq3   = ifelse(is.na(freq3)  , 0, freq3)
)
df <- df %>%
mutate(
gender  = ifelse(is.na(gender) , as.factor('Unknown'), gender) ,
race    = ifelse(is.na(race)   , as.factor('Unknown'), race)   ,
ethnic  = ifelse(is.na(ethnic) , as.factor('Unknown'), ethnic) ,
employ  = ifelse(is.na(employ) , as.factor('Unknown'), employ) ,
hlthins = ifelse(is.na(hlthins), as.factor('Unknown'), hlthins),
psyprob = ifelse(is.na(psyprob), as.factor('Unknown'), psyprob),
freq1   = ifelse(is.na(freq1)  , 0, freq1)                     ,
freq2   = ifelse(is.na(freq2)  , 0, freq2)                     ,
freq3   = ifelse(is.na(freq3)  , 0, freq3)
)
tedsa_puf_2020_r <- tedsa_puf_2020_r %>% distinct()
df <- df %>% distinct()
tedsa_puf_2020_r <- tedsa_puf_2020_r %>%
mutate(
gender = recode(gender, `1` = 'Male', `2` = 'Female'),
employ = recode(employ, `1` = 'Employed', `2` = 'Unemployed', `3` = 'Not in Labor Force')
)
df <- df %>%
mutate(
gender = recode(gender, `1` = 'Male', `2` = 'Female'),
employ = recode(employ, `1` = 'Employed', `2` = 'Unemployed', `3` = 'Not in Labor Force')
)
my_theme <- theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
panel.grid.major = element_line(colour = "lightgray", linetype = "dashed"),
panel.background = element_rect(fill = "white")
)
ggplot(df, aes(x = gender, fill = gender)) +
geom_bar(color = "black") +
labs(title = "Gender Distribution in 2015-2019",
x = "Gender",
y = "Count") +
scale_fill_manual(values = c("Male" = "skyblue", "Female" = "pink")) +
my_theme
ggplot(df, aes(x = age)) +
geom_histogram(binwidth = 1, fill = "lightgreen", color = "black") +
labs(title = "Age Distribution in 2015-2019",
x = "Age",
y = "Count") +
my_theme
ggplot(df, aes(x = ethnic, fill = ethnic)) +
geom_bar(color = "black") +
labs(title = "Ethnicity Distribution in 2015-2019",
x = "Ethnicity",
y = "Count") +
my_theme
df_modified <- df[!is.na(df$employ), ]
ggplot(df_modified, aes(x = employ, fill = employ)) +
geom_bar(color = "black") +
labs(title = "Employment Status Distribution in 2015-2019",
x = "Employment Status",
y = "Count") +
my_theme
df_modifiede <- df[!is.na(df$sub1), ]
ggplot(df_modifiede, aes(x = factor(sub1), fill = factor(sub1))) +
geom_bar(color = "black") +
labs(title = "Substance 1 Distribution in 2015-2019",
x = "Substance 1",
y = "Count") +
scale_x_discrete(drop = FALSE) +  # Ensure all factor levels are shown
my_theme
df_modifieds <- df[!is.na(df$sub2), ]
# Plot Substance 2 Distribution
ggplot(df_modifieds, aes(x = factor(sub2), fill = factor(sub2))) +
geom_bar(color = "black") +
labs(title = "Substance 2 Distribution in 2015-2019",
x = "Substance 2",
y = "Count") +
scale_x_discrete(drop = FALSE) +  # Ensure all factor levels are shown
my_theme
df_modifiedx <- df[!is.na(df$sub3), ]
# Plot Substance 3 Distribution
ggplot(df_modifiedx, aes(x = factor(sub3), fill = factor(sub3))) +
geom_bar(color = "black") +
labs(title = "Substance 3 Distribution in 2015-2019",
x = "Substance 3",
y = "Count") +
scale_x_discrete(drop = FALSE) +  # Ensure all factor levels are shown
my_theme
ggplot(df, aes(x = educ, fill = educ)) +
geom_bar(color = "black") +
labs(title = "Education Level Distribution in 2015-2019",
x = "Education Level",
y = "Count") +
my_theme
# Bar plot for hlthins
ggplot(df, aes(x = factor(hlthins))) +
geom_bar(fill = "salmon", color = "black") +
labs(x = "Health Insurance Status", y = "Count", title = "Distribution of Health Insurance Status (hlthins) in 2015-2019")
df <- df %>%
mutate(
age_group = case_when(
age <= 18 ~ 'Under 18',
age > 18 & age <= 25 ~ '19-25',
age > 25 & age <= 35 ~ '26-35',
age > 35 ~ '36+'
)
)
# Function to create completion status based on subsequent years
create_completion_status <- function(df, years) {
# Initialize an empty vector to store completion status
completion_status <- rep(0, nrow(df))
# Loop through each year in the list of years
for (year in years) {
# Check if caseid is present in subsequent year data
completion_status <- completion_status | (df$caseid %in% df$caseid[df$admyr == year + 1])
}
# Return the completion status as 0 or 1
return(completion_status)
}
# Assuming df is your dataset
# List of subsequent years to check
years_to_check <- c(2015, 2016, 2017, 2018, 2019, 2020)
# Create completion_status column for df dataset
df <- df %>%
mutate(completion_status = create_completion_status(., years_to_check))
glimpse(df)
# Load necessary libraries for splitting the data
library(tidymodels)
# Set seed for reproducibility
set.seed(123)
# Split the data into training and testing sets
split <- initial_split(df, prop = 0.8, strata = completion_status)
# Extract the training and testing sets
train_data <- training(split)
test_data <- testing(split)
# Number of rows in the training set
train_rows <- nrow(train_data)
# Number of rows in the testing set
test_rows <- nrow(test_data)
# Print the number of rows
cat("Number of rows in the training set:", train_rows, "\n")
cat("Number of rows in the testing set:", test_rows, "\n")
library(glmnet)
# Define formula for logistic regression
formula <- completion_status ~ sub1 + age + gender + ethnic + race + employ + educ + hlthins + psyprob + freq1 + freq2 + freq3
# Fit logistic regression model
model <- glm(formula, data = train_data, family = binomial)
# Summarize the model
summary(model)
